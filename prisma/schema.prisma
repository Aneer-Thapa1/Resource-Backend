generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model vendors {
  vendor_id          Int              @id @default(autoincrement())
  vendor_name        String?          @db.VarChar(255)
  vat_number         String?          @db.VarChar(255)
  vendor_contact     String
  vendor_profile     String
  categories         String?
  last_purchase_date DateTime?        @db.Date
  last_paid          DateTime?        @db.Date
  payment_duration   Int?
  next_payment_date  DateTime?        @db.Date
  black_list         Boolean?
  bills              bills[]
  vendorCategory     vendorCategory[]
}

model vendorCategory {
  id              Int          @id @default(autoincrement())
  vendor          vendors      @relation(fields: [vendor_id], references: [vendor_id])
  vendor_id       Int
  category        itemCategory @relation(fields: [itemCategory_id], references: [item_category_id])
  itemCategory_id Int
}

model users {
  user_id          Int                       @id @default(autoincrement())
  user_name        String                    @db.VarChar(95)
  user_email       String                    @unique @db.VarChar(65)
  contact          String?                   @unique @db.VarChar(65)
  password         String                    @db.VarChar(255)
  role             String                    @default("user")
  otp              String?
  otp_expiry       DateTime?
  isActive         Boolean?                  @default(false)
  department       department?               @relation(fields: [department_id], references: [department_id])
  department_id    Int?
  requestsMade     request[]                 @relation("RequestedBy")
  requestsReceived request[]                 @relation("RequestedFor")
  notification     notification[]
  conversations    ConversationParticipant[]
}

model feature {
  feature_id   Int               @id @default(autoincrement())
  feature_name String
  items        itemsOnFeatures[]
}

model items {
  item_id            Int               @id @default(autoincrement())
  item_name          String?           @db.VarChar(255)
  measuring_unit     String?           @db.VarChar(50)
  quantity           Int?
  remaining_quantity Int?
  low_limit          Int?
  recent_purchase    DateTime?
  unit_price         Int?
  total_Amount       Float?
  Status             Boolean?
  category           category?         @relation(fields: [category_id], references: [category_id])
  category_id        Int?
  itemCategory       itemCategory?     @relation(fields: [item_category_id], references: [item_category_id])
  item_category_id   Int?
  itemsOnFeatures    itemsOnFeatures[]
  BillItems          BillItems[]
  requestItems       requestItems[]
}

model bills {
  bill_id       Int         @id @default(autoincrement())
  bill_no       String?     @db.VarChar(255)
  bill_date     DateTime?   @db.Date
  invoice_no    String?     @db.VarChar(255)
  paid_amount   Float?      @db.Float
  left_amount   Float?      @db.Float
  actual_Amount Float?
  vendors       vendors?    @relation(fields: [vendor_ID], references: [vendor_id], onDelete: Cascade)
  vendor_ID     Int?
  bill_type     String?
  created_At    DateTime    @default(now())
  isApproved    Boolean     @default(false)
  BillItems     BillItems[]
}

model BillItems {
  id                Int    @id @default(autoincrement())
  bill_id           Int
  item_id           Int
  quantity          Int?
  unit_price        Int?
  withVATAmount     Float? @db.Float
  TDS_deduct_amount Float? @db.Float
  total_Amount      Float?
  TDS               Float? @db.Float
  bill              bills  @relation(fields: [bill_id], references: [bill_id], onDelete: Cascade)
  item              items  @relation(fields: [item_id], references: [item_id], onDelete: Cascade)

  @@unique([bill_id, item_id])
}

model request {
  request_id    Int            @id @default(autoincrement())
  purpose       String?
  user          users?         @relation("RequestedBy", fields: [user_id], references: [user_id], onDelete: Cascade)
  requestedFor  users?         @relation("RequestedFor", fields: [requested_for], references: [user_id], onDelete: Cascade)
  user_id       Int
  requested_for Int
  approved_by   Int?
  remarks       String?
  request_date  DateTime       @default(now())
  status        String
  isReturned    Boolean        @default(false)
  requestItems  requestItems[]
  issue         issue[]
}

model issue {
  id          Int      @id @default(autoincrement())
  issue_item  String
  issue_Date  DateTime @default(now())
  Quantity    Int
  purpose     String?
  issued_to   String?
  request     request? @relation(fields: [request_Id], references: [request_id])
  request_Id  Int?
  approved_by String?
}

model requestItems {
  id         Int     @id @default(autoincrement())
  quantity   Int?
  request    request @relation(fields: [request_id], references: [request_id], onDelete: Cascade)
  request_id Int
  item       items   @relation(fields: [item_id], references: [item_id], onDelete: Cascade)
  item_id    Int

  @@unique([request_id, item_id])
}

model itemsOnFeatures {
  item_id    Int
  feature_id Int
  value      String?
  item       items   @relation(fields: [item_id], references: [item_id])
  feature    feature @relation(fields: [feature_id], references: [feature_id])

  @@id([item_id, feature_id])
}

model category {
  category_id   Int     @id @default(autoincrement())
  category_name String  @unique
  items         items[]
}

model itemCategory {
  item_category_id   Int     @id @default(autoincrement())
  item_category_name String  @unique
  items              items[]

  vendorCategory vendorCategory[]
}

model notification {
  notification_id Int      @id @default(autoincrement())
  message         String
  state           Boolean  @default(false)
  users           users?   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id         Int
  created_at      DateTime @default(now())
}

model Conversation {
  id           Int                       @id @default(autoincrement())
  participants ConversationParticipant[]
  messages     Message[]
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
}

model ConversationParticipant {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  user           users        @relation(fields: [userId], references: [user_id])
  userId         Int
}

model Message {
  id             Int          @id @default(autoincrement())
  senderId       Int
  receiverId     Int
  message        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
}

model department {
  department_id   Int     @id @default(autoincrement())
  department_name String
  users           users[]
}
