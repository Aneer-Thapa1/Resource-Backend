generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model vendors {
  vendor_id          Int       @id @default(autoincrement())
  vendor_name        String?   @db.VarChar(255)
  vat_number         String?   @db.VarChar(255)
  vendor_contact     Int?
  last_purchase_date DateTime? @db.Date
  last_paid          DateTime? @db.Date
  payment_duration   Int?
  next_payment_date  DateTime? @db.Date
  black_list         Boolean?
  bills              bills[]
}

model bills {
  bill_ID       Int       @id @default(autoincrement())
  entry_date    DateTime  @default(now())
  bill_no       String?   @db.VarChar(255)
  bill_amount   Float?    @db.Float
  TDS           Float?    @db.Float
  bill_date     DateTime? @db.Date
  invoice_no    String?   @db.VarChar(255)
  actual_amount Float?    @db.Float
  paid_amount   Float?    @db.Float
  left_amount   Float?    @db.Float
  unit_price    Int?
  quantity      Int?
  vendors       vendors?  @relation(fields: [vendor_ID], references: [vendor_id], onDelete: Cascade)
  vendor_ID     Int?
  items         items?    @relation(fields: [item_id], references: [item_id], onDelete: Cascade)
  item_id       Int?

  @@index([vendor_ID, item_id])
}

model users {
  user_id    Int       @id @default(autoincrement())
  user_name  String    @db.VarChar(95)
  user_email String    @unique @db.VarChar(65)
  password   String    @db.VarChar(255)
  role       String    @default("user")
  otp        String?
  otp_expiry DateTime?
  department String?   @db.VarChar(100)
  status    Boolean
  request request[]
  notification notification[]
}

model feature {
  feature_id   Int               @id @default(autoincrement())
  feature_name String
  items        itemsOnFeatures[]
}

model items {
  item_id          Int           @id @default(autoincrement())
  item_name        String?       @db.VarChar(255)
  measuring_unit   String?       @db.VarChar(50)
  quantity         Int?
  low_limit        Int?
  recent_purchase  DateTime?
  unit_price       Int?
  Status           Boolean?
  category         category?     @relation(fields: [category_id], references: [category_id])
  category_id      Int?
  itemCategory     itemCategory? @relation(fields: [item_category_id], references: [item_category_id])
  item_category_id Int?

  itemsOnFeatures itemsOnFeatures[]

  bills bills[]

  request request[]
}

model itemsOnFeatures {
  item_id    Int
  feature_id Int
  value      String? // Added to store the value of the feature
  item       items   @relation(fields: [item_id], references: [item_id])
  feature    feature @relation(fields: [feature_id], references: [feature_id])

  @@id([item_id, feature_id])
}

model request {
  request_id        Int      @id @default(autoincrement())
  request_item_name String
  request_quantity  Int
  purpose           String?
  users             users?   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id           Int
  item              items?   @relation(fields: [item_id], references: [item_id], onDelete: Cascade)
  item_id           Int
  request_date      DateTime @default(now())
  status            String
  isReturned        Boolean  @default(false)
}

model category {
  category_id   Int     @id @default(autoincrement())
  category_name String  @unique
  items         items[]
}

model itemCategory {
  item_category_id   Int     @id @default(autoincrement())
  item_category_name String  @unique
  items              items[]
}

model notification {
  notification_id Int      @id @default(autoincrement())
  message         String
  state           Boolean  @default(false)
  users           users?   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id         Int
  created_at      DateTime @default(now())
}
model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   ChatMember[]
  Message Message[]
}

model ChatMember {
  id     Int    @id @default(autoincrement())
  chatId Int
  memberId String
  Chat   Chat   @relation(fields: [chatId], references: [id])

  @@unique([chatId, memberId])
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  senderId  String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Chat Chat @relation(fields: [chatId], references: [id])
}